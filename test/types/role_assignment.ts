/*****
 License
 --------------
 Copyright Â© 2020 Mojaloop Foundation
 The Mojaloop files are made available by the Mojaloop Foundation under the
 Apache License, Version 2.0 (the 'License') and you may not use these files
 except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files
 are distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 - Matt Kingston - matt.kingston@modusbox.com
 - Vijaya Kumar Guthi <vijaya.guthi@modusbox.com>

 --------------
 ******/
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    /** The HTTP request GET /health is used to return the current status of the API. */
    get: operations["HealthGet"];
  };
  "/metrics": {
    /** The HTTP request GET /metrics is used to return metrics for the API. */
    get: operations["MetricsGet"];
  };
  "/users": {
    /** The HTTP request GET /users is used to return a list of user. Retrieves a user list from a WSO2 identity server. */
    get: operations["UsersGet"];
  };
  "/users/{ID}": {
    /** The HTTP request GET /users is used to return a specific user. Retrieves a user from a WSO2 identity server. */
    get: operations["UsersIDGet"];
    parameters: {
      path: {
        ID: string;
      };
    };
  };
  "/participants": {
    /** The HTTP request GET /participants is used to return a list of participant ids. Retrieves a participant list from a @mojaloop/central-ledger service. */
    get: operations["ParticipantsGet"];
  };
  "/roles": {
    /** The HTTP request GET /roles is used to return a list of role ids. */
    get: operations["RolesGet"];
  };
  "/users/{ID}/participants": {
    /** The HTTP request GET /users/{ID}/participants is used to return a list of participants assigned to a user. Retrieves a user's assigned participant list from an ory/keto service. */
    get: operations["UsersIDParticipantsGet"];
    /** The HTTP request PATCH /users/{ID}/participants is used to assign/remove a participant to/from a user. These participant operations are sent to an ory/keto service. */
    patch: operations["UsersIDParticipantsPatch"];
    parameters: {
      path: {
        ID: string;
      };
    };
  };
  "/users/{ID}/roles": {
    /** The HTTP request GET /users/{ID}/roles is used to return a list of roles assigned to a user. Retrieves a user's assigned role list from an ory/keto service. */
    get: operations["UsersIDRolesGet"];
    /** The HTTP request PATCH /users/{ID}/roles is used to assign/remove a role to/from a user. These role operations are sent to an ory/keto service. */
    patch: operations["UsersIDRolesPatch"];
    parameters: {
      path: {
        ID: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /**
     * User
     * @description A trimmed data model of a WSO2 user.
     */
    User: {
      /** @description An WSO2 ID. */
      id: string;
      /** @description WSO2 username. */
      username: string;
      /** @description WSO2 name object. */
      name?: {
        givenName?: string;
        familyName?: string;
      };
      emails?: string[];
    };
    /**
     * UsersGetResponse
     * @description A list of users.
     */
    UsersGetResponse: {
      users: components["schemas"]["User"][];
    };
    /**
     * UsersIDGetResponse
     * @description A user of a specified ID.
     */
    UsersIDGetResponse: {
      user: components["schemas"]["User"];
    };
    /**
     * ParticipantsGetResponse
     * @description List of assignable participant ids.
     */
    ParticipantsGetResponse: {
      participants: string[];
    };
    /**
     * RolesGetResponse
     * @description List of assignable role ids.
     */
    RolesGetResponse: {
      roles: string[];
    };
    /**
     * UsersIDParticipantsGetResponse
     * @description List of participants ids that a user is a member of.
     */
    UsersIDParticipantsGetResponse: {
      participants: string[];
    };
    /**
     * UsersIDRolesGetResponse
     * @description List of roles ids that a user is a member of.
     */
    UsersIDRolesGetResponse: {
      roles: string[];
    };
    UsersIDParticipantsPatchRequest: {
      participantOperations: {
        participantId: string;
        /** @enum {string} */
        action: "insert" | "delete";
      }[];
    };
    UsersIDRolesPatchRequest: {
      roleOperations: {
        roleId: string;
        /** @enum {string} */
        action: "insert" | "delete";
      }[];
    };
    /**
     * ErrorCode
     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
     * @example 5100
     */
    ErrorCode: string;
    /**
     * ErrorDescription
     * @description Error description string.
     */
    ErrorDescription: string;
    /**
     * ExtensionKey
     * @description Extension key.
     */
    ExtensionKey: string;
    /**
     * ExtensionValue
     * @description Extension value.
     */
    ExtensionValue: string;
    /**
     * Extension
     * @description Data model for the complex type Extension.
     */
    Extension: {
      key: components["schemas"]["ExtensionKey"];
      value: components["schemas"]["ExtensionValue"];
    };
    /**
     * ExtensionList
     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
     */
    ExtensionList: {
      /** @description Number of Extension elements. */
      extension: components["schemas"]["Extension"][];
    };
    /**
     * ErrorInformation
     * @description Data model for the complex type ErrorInformation.
     */
    ErrorInformation: {
      errorCode: components["schemas"]["ErrorCode"];
      errorDescription: components["schemas"]["ErrorDescription"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * ErrorInformationResponse
     * @description Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
     */
    ErrorInformationResponse: {
      errorInformation?: components["schemas"]["ErrorInformation"];
    };
  };
  responses: {
    /** OK */
    200: unknown;
    /** Bad Request */
    400: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Unauthorized */
    401: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Forbidden */
    403: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Not Found */
    404: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Method Not Allowed */
    405: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Not Acceptable */
    406: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Not Implemented */
    501: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Service Unavailable */
    503: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
  };
  headers: {
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    "Content-Length"?: number;
    /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
    "Content-Type": string;
  };
}

export interface operations {
  /** The HTTP request GET /health is used to return the current status of the API. */
  HealthGet: {
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /metrics is used to return metrics for the API. */
  MetricsGet: {
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /users is used to return a list of user. Retrieves a user list from a WSO2 identity server. */
  UsersGet: {
    responses: {
      200: components["schemas"]["UsersGetResponse"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /users is used to return a specific user. Retrieves a user from a WSO2 identity server. */
  UsersIDGet: {
    parameters: {
      path: {
        ID: string;
      };
    };
    responses: {
      200: components["schemas"]["UsersIDGetResponse"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /participants is used to return a list of participant ids. Retrieves a participant list from a @mojaloop/central-ledger service. */
  ParticipantsGet: {
    responses: {
      200: components["schemas"]["ParticipantsGetResponse"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /roles is used to return a list of role ids. */
  RolesGet: {
    responses: {
      200: components["schemas"]["RolesGetResponse"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /users/{ID}/participants is used to return a list of participants assigned to a user. Retrieves a user's assigned participant list from an ory/keto service. */
  UsersIDParticipantsGet: {
    parameters: {
      path: {
        ID: string;
      };
    };
    responses: {
      200: components["schemas"]["UsersIDParticipantsGetResponse"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request PATCH /users/{ID}/participants is used to assign/remove a participant to/from a user. These participant operations are sent to an ory/keto service. */
  UsersIDParticipantsPatch: {
    parameters: {
      path: {
        ID: string;
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UsersIDParticipantsPatchRequest"];
      };
    };
  };
  /** The HTTP request GET /users/{ID}/roles is used to return a list of roles assigned to a user. Retrieves a user's assigned role list from an ory/keto service. */
  UsersIDRolesGet: {
    parameters: {
      path: {
        ID: string;
      };
    };
    responses: {
      200: components["schemas"]["UsersIDRolesGetResponse"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request PATCH /users/{ID}/roles is used to assign/remove a role to/from a user. These role operations are sent to an ory/keto service. */
  UsersIDRolesPatch: {
    parameters: {
      path: {
        ID: string;
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UsersIDRolesPatchRequest"];
      };
    };
  };
}

export interface external {}
